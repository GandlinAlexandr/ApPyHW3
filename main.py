from fastapi import Depends, FastAPI, Query, HTTPException, Security
from fastapi.security import OAuth2PasswordBearer
from typing import Optional, List
from sqlalchemy.ext.asyncio import AsyncSession
from database import get_db, Link, init_db, SessionLocal, ExpiredLink, Project
import random, string
from fastapi.responses import RedirectResponse
from schemas import ShortenResponse, SearchLinkResponse, ExpiredLinkResponse
from contextlib import asynccontextmanager
import asyncio
from sqlalchemy.future import select
import redis
import config
from datetime import datetime, timedelta, timezone
from config import CLEANUP_AFTER_DAYS
from sqlalchemy import delete
from auth.db import User
from auth.schemas import UserCreate, UserRead, UserUpdate
from auth.users import auth_backend, current_active_user, fastapi_users
from sqlalchemy import desc
import json


# –ò—Å–ø–æ–ª—å–∑—É—é lifespan
@asynccontextmanager
async def lifespan(app: FastAPI):
    await init_db()  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    # await create_db_and_tables()
    task = asyncio.create_task(delete_expired_links_task())
    task_day = asyncio.create_task(delete_expired_links_task_days())
    yield  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    task.cancel()
    task_day.cancel()


app = FastAPI(lifespan=lifespan)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(host=config.REDIS_HOST, port=6379, decode_responses=True)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
app.include_router(
    fastapi_users.get_auth_router(auth_backend), prefix="/auth/jwt", tags=["auth"]
)
app.include_router(
    fastapi_users.get_register_router(UserRead, UserCreate),
    prefix="/auth",
    tags=["auth"],
)
# app.include_router(
#     fastapi_users.get_reset_password_router(),
#     prefix="/auth",
#     tags=["auth"],
# )
# app.include_router(
#     fastapi_users.get_verify_router(UserRead),
#     prefix="/auth",
#     tags=["auth"],
# )
app.include_router(
    fastapi_users.get_users_router(UserRead, UserUpdate),
    prefix="/users",
    tags=["users"],
)

# @app.get("/authenticated-route")
# async def authenticated_route(user: User = Depends(current_active_user)):
#     return {"message": f"–ü—Ä–∏–≤–µ—Ç, {user.email}!"}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_short_code(length=6):
    return "".join(random.choices(string.ascii_letters + string.digits, k=length))


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
async def delete_expired_links_task():
    while True:
        async with SessionLocal() as session:
            now = datetime.now(timezone.utc).replace(tzinfo=None)

            expired_links = await session.execute(
                select(Link).where(Link.expires_at.isnot(None), Link.expires_at <= now)
            )
            expired_links = expired_links.scalars().all()

            for link in expired_links:
                # –ï—Å–ª–∏ —É —Å—Å—ã–ª–∫–∏ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
                if link.owner_id is not None:
                    archived = ExpiredLink(
                        original_url=link.original_url,
                        short_code=link.short_code,
                        created_at=link.created_at,
                        expires_at=link.expires_at,
                        access_count=link.access_count,
                        last_accessed_at=link.last_accessed_at,
                        owner_id=link.owner_id,
                        project_id=link.project_id,
                    )
                    session.add(archived)

                # üóë –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ Redis
                await session.delete(link)
                redis_client.delete(link.short_code)
                redis_client.delete(f"stats:{link.short_code}")
                redis_client.delete(f"search:{link.original_url}")

            await session.commit()

        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –ø–æ–ª–º–∏–Ω—É—Ç—ã


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
async def delete_expired_links_task_days():
    while True:
        async with SessionLocal() as session:
            now = datetime.now(timezone.utc).replace(tzinfo=None)
            threshold = now - timedelta(days=CLEANUP_AFTER_DAYS)
            """
            –£—Å–ª–æ–≤–∏—è —É–¥–∞–ª–µ–Ω–∏—è:
            1. –ë—ã–ª –ø–µ—Ä–µ—Ö–æ–¥, –Ω–æ –¥–∞–≤–Ω–æ
            2. –ò–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Ö–æ–¥–∞, –Ω–æ —Å—Å—ã–ª–∫–∞ —Å—Ç–∞—Ä–∞—è
            """
            condition = (
                (Link.last_accessed_at != None) & (Link.last_accessed_at < threshold)
            ) | ((Link.last_accessed_at == None) & (Link.created_at < threshold))

            result = await session.execute(select(Link).where(condition))
            links = result.scalars().all()

            for link in links:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–µ—Ü)
                if link.owner_id is not None:
                    archived = ExpiredLink(
                        original_url=link.original_url,
                        short_code=link.short_code,
                        created_at=link.created_at,
                        expires_at=link.expires_at,
                        last_accessed_at=link.last_accessed_at,
                        owner_id=link.owner_id,
                        project_id=link.project_id,
                    )
                    session.add(archived)

                redis_client.delete(link.short_code)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
            await session.execute(delete(Link).where(condition))
            await session.commit()

        await asyncio.sleep(3600 * 6)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏
async def verify_link_owner(
    link_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(current_active_user),
) -> Link:
    result = await db.execute(select(Link).where(Link.id == link_id))
    link = result.scalar_one_or_none()
    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if link.owner_id != user.id:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    return link


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/jwt/login")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/links/shorten", response_model=ShortenResponse, tags=["Authorized only"])
async def shorten_url(
    original_url: str = Query(..., description="–ò—Å—Ö–æ–¥–Ω—ã–π URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"),
    custom_alias: Optional[str] = Query(
        None, description="–ö–∞—Å—Ç–æ–º–Ω—ã–π alias (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    ),
    expires_at: Optional[datetime] = Query(
        None,
        description="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC: 2025-03-23T19:50 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
    ),
    project_id: Optional[int] = Query(None, description="ID –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
    db: AsyncSession = Depends(get_db),
    token: str = Security(oauth2_scheme),
    user: User = Depends(current_active_user),
):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π alias, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏ –ø—Ä–∏–≤—è–∑–∫—É –∫ –ø—Ä–æ–µ–∫—Ç—É.
    –î–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if custom_alias:
        existing_link = await db.execute(
            select(Link).where(Link.short_code == custom_alias)
        )
        if existing_link.scalar():
            raise HTTPException(
                status_code=400, detail="–ö–∞—Å—Ç–æ–º–Ω—ã–π alias —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        short_code = custom_alias
    else:
        short_code = generate_short_code()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç ‚Äî –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if project_id is not None:
        project_result = await db.execute(
            select(Project).where(Project.id == project_id, Project.owner_id == user.id)
        )
        project = project_result.scalar()
        if not project:
            raise HTTPException(
                status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
            )

    new_link = Link(
        original_url=original_url,
        short_code=short_code,
        expires_at=expires_at,
        owner_id=user.id,
        project_id=project_id,
    )
    db.add(new_link)
    await db.commit()
    await db.refresh(new_link)

    return ShortenResponse(
        short_code=short_code,
        short_url=f"http://localhost:8000/{short_code}",
        original_url=original_url,
        expires_at=expires_at,
    )


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π
@app.post("/links/public", response_model=ShortenResponse, tags=["Public"])
async def shorten_url_public(
    original_url: str = Query(..., description="–ò—Å—Ö–æ–¥–Ω—ã–π URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"),
    custom_alias: Optional[str] = Query(
        None, description="–ö–∞—Å—Ç–æ–º–Ω—ã–π alias (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    ),
    expires_at: Optional[datetime] = Query(
        None,
        description="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC: 2025-03-23T19:50 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
    ),
    db: AsyncSession = Depends(get_db),
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if custom_alias:
        existing_link = await db.execute(
            select(Link).where(Link.short_code == custom_alias)
        )
        if existing_link.scalar():
            raise HTTPException(
                status_code=400, detail="–ö–∞—Å—Ç–æ–º–Ω—ã–π alias —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            )
        short_code = custom_alias
    else:
        short_code = generate_short_code()

    new_link = Link(
        original_url=original_url,
        short_code=short_code,
        expires_at=expires_at,
        owner_id=None,
    )
    db.add(new_link)
    await db.commit()
    await db.refresh(new_link)

    return ShortenResponse(
        short_code=short_code,
        short_url=f"http://localhost:8000/{short_code}",
        original_url=original_url,
        expires_at=expires_at,
    )


# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ)
@app.get("/{short_code}", tags=["Public"])
async def redirect_to_url(short_code: str, db: AsyncSession = Depends(get_db)):
    """
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∫–æ–¥—É.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à Redis
    cached_url = redis_client.get(short_code)
    if cached_url:
        await db.execute(
            Link.__table__.update()
            .where(Link.short_code == short_code)
            .values(
                last_accessed_at=datetime.utcnow(), access_count=Link.access_count + 1
            )
        )
        await db.commit()
        return RedirectResponse(url=cached_url)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
    result = await db.execute(select(Link).where(Link.short_code == short_code))
    link = result.scalars().first()

    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    link.access_count += 1
    link.last_accessed_at = datetime.utcnow()
    await db.commit()

    # –ö—ç—à–∏—Ä—É–µ–º URL –≤ Redis
    redis_client.setex(short_code, 3600, link.original_url)

    return RedirectResponse(url=link.original_url)


# –ü–æ–∏—Å–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
@app.get("/links/search", response_model=List[SearchLinkResponse], tags=["Public"])
async def search_link(
    original_url: str = Query(..., description="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–∏—Å–∫–∞"),
    db: AsyncSession = Depends(get_db),
):
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Redis –Ω–∞ 10 –º–∏–Ω—É—Ç.
    """
    cache_key = f"search:{original_url}"

    cached = redis_client.get(cache_key)
    if cached:
        try:
            return [SearchLinkResponse(**item) for item in cached]
        except Exception:
            pass

    result = await db.execute(select(Link).where(Link.original_url == original_url))
    links = result.scalars().all()

    if not links:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–æ—Ç–∫–∏–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

    response_data = [
        SearchLinkResponse(
            short_code=link.short_code,
            short_url=f"http://localhost:8000/{link.short_code}",
            original_url=link.original_url,
            created_at=link.created_at,
            expires_at=link.expires_at,
        )
        for link in links
    ]

    redis_client.setex(
        cache_key,
        600,
        json.dumps([item.model_dump(mode="json") for item in response_data]),
    )

    return response_data


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
@app.get("/links/{short_code}/stats", tags=["Public"])
async def get_link_stats(short_code: str, db: AsyncSession = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–¥—É –≤ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –≤ Redis.
    """
    cache_key = f"stats:{short_code}"
    cached = redis_client.get(cache_key)
    if cached:
        return json.loads(cached)

    result = await db.execute(select(Link).where(Link.short_code == short_code))
    link = result.scalar()
    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    stats = {
        "original_url": link.original_url,
        "created_at": link.created_at.isoformat() if link.created_at else None,
        "access_count": link.access_count,
        "last_accessed_at": (
            link.last_accessed_at.isoformat() if link.last_accessed_at else None
        ),
    }

    redis_client.setex(cache_key, 600, json.dumps(stats))

    return stats


# –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ short_code. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
@app.patch("/links/{short_code}", tags=["Authorized only"])
async def update_short_link(
    short_code: str,
    new_url: str = Query(..., description="–ù–æ–≤—ã–π URL –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è"),
    db: AsyncSession = Depends(get_db),
    token: str = Security(oauth2_scheme),  # –¥–ª—è Swagger + –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    user: User = Depends(current_active_user),
):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –ø–æ short_code. –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
    """
    result = await db.execute(select(Link).where(Link.short_code == short_code))
    link = result.scalars().first()

    if not link:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–æ—Ç–∫–∏–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if link.owner_id != user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏")

    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ Redis –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    redis_client.delete(short_code)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ë–î
    link.original_url = str(new_url)
    await db.commit()
    await db.refresh(link)

    return {
        "short_code": short_code,
        "original_url": str(new_url),
        "short_url": f"http://localhost:8000/{short_code}",
    }


# –£–¥–∞–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –∞—Ä—Ö–∏–≤.
@app.delete("/links/{short_code}", tags=["Authorized only"])
async def delete_link(
    short_code: str,
    db: AsyncSession = Depends(get_db),
    token: str = Security(oauth2_scheme),
    user: User = Depends(current_active_user),
):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü)
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –∞—Ä—Ö–∏–≤.
    """
    result = await db.execute(select(Link).where(Link.short_code == short_code))
    link = result.scalar()

    if not link:
        raise HTTPException(status_code=404, detail="–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if link.owner_id != user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏")

    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    archived = ExpiredLink(
        original_url=link.original_url,
        short_code=link.short_code,
        created_at=link.created_at,
        expires_at=link.expires_at,
        last_accessed_at=link.last_accessed_at,
        access_count=link.access_count,
        owner_id=link.owner_id,
        project_id=link.project_id,
    )
    db.add(archived)

    await db.delete(link)
    await db.commit()
    redis_client.delete(short_code)

    return {"message": "–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤"}


# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏)
@app.get(
    "/links/expired", response_model=List[ExpiredLinkResponse], tags=["Authorized only"]
)
async def get_expired_links_for_user(
    db: AsyncSession = Depends(get_db), user: User = Depends(current_active_user)
):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º—ë—Ä—Ç–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.
    """
    cache_key = f"expired:{user.id}"
    cached_data = redis_client.get(cache_key)
    if cached_data:
        return json.loads(cached_data)

    result = await db.execute(
        select(ExpiredLink).where(ExpiredLink.owner_id == user.id)
    )
    links = result.scalars().all()

    response_data = [
        {
            "short_code": link.short_code,
            "original_url": link.original_url,
            "created_at": link.created_at.isoformat() if link.created_at else None,
            "expires_at": link.expires_at.isoformat() if link.expires_at else None,
            "access_count": link.access_count,
            "last_accessed_at": (
                link.last_accessed_at.isoformat() if link.last_accessed_at else None
            ),
            "project_id": link.project_id,
        }
        for link in links
    ]

    redis_client.setex(cache_key, 300, json.dumps(response_data))  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    return response_data


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
@app.post("/projects", tags=["Authorized only"])
async def create_project(
    name: str = Query(...),
    db: AsyncSession = Depends(get_db),
    user: User = Depends(current_active_user),
):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    new_project = Project(name=name, owner_id=user.id)
    db.add(new_project)
    await db.commit()
    await db.refresh(new_project)
    return {"id": new_project.id, "name": new_project.name}


# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
@app.get("/projects/full", tags=["Authorized only"])
async def get_projects_with_links(
    db: AsyncSession = Depends(get_db),
    user: User = Depends(current_active_user),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤ –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∏—Ö.
    """
    cache_key = f"projects_with_links:{user.id}"
    cached = redis_client.get(cache_key)
    if cached:
        return json.loads(cached)

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    projects_result = await db.execute(
        select(Project).where(Project.owner_id == user.id)
    )
    projects = projects_result.scalars().all()

    result = []

    for project in projects:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
        links_result = await db.execute(
            select(Link).where(Link.project_id == project.id)
        )
        links = links_result.scalars().all()

        result.append(
            {
                "project_id": project.id,
                "project_name": project.name,
                "created_at": project.created_at.isoformat(),
                "links": [
                    {
                        "short_code": link.short_code,
                        "original_url": link.original_url,
                        "short_url": f"http://localhost:8000/{link.short_code}",
                        "created_at": link.created_at.isoformat(),
                        "expires_at": (
                            link.expires_at.isoformat() if link.expires_at else None
                        ),
                    }
                    for link in links
                ],
            }
        )

    redis_client.setex(cache_key, 300, json.dumps(result))  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    return result


# –¢–æ–ø —Å—Ä–µ–¥–∏ –í–°–ï–• —Å—Å—ã–ª–æ–∫
@app.get("/links/popular", tags=["Public"])
async def get_most_popular_links(
    limit: int = Query(10, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –≤ –≤—ã–¥–∞—á–µ"),
    db: AsyncSession = Depends(get_db),
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—ç—à–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 5 –º–∏–Ω—É—Ç.
    """
    cache_key = f"popular_links:{limit}"
    cached = redis_client.get(cache_key)
    if cached:
        return json.loads(cached)

    result = await db.execute(
        select(Link).order_by(desc(Link.access_count)).limit(limit)
    )
    links = result.scalars().all()

    response = [
        {
            "short_code": link.short_code,
            "original_url": link.original_url,
            "access_count": link.access_count,
        }
        for link in links
    ]

    redis_client.setex(cache_key, 300, json.dumps(response))

    return response


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
@app.delete("/projects/{project_id}", tags=["Authorized only"])
async def delete_project(
    project_id: int,
    db: AsyncSession = Depends(get_db),
    user: User = Depends(current_active_user),
):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Å—Å—ã–ª–∫–∏.
    –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result = await db.execute(
        select(Project).where(Project.id == project_id, Project.owner_id == user.id)
    )
    project = result.scalar_one_or_none()
    if not project:
        raise HTTPException(
            status_code=404, detail="–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º"
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ–µ–∫—Ç—É
    links_result = await db.execute(select(Link).where(Link.project_id == project.id))
    links = links_result.scalars().all()

    for link in links:
        # –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        archived = ExpiredLink(
            original_url=link.original_url,
            short_code=link.short_code,
            created_at=link.created_at,
            expires_at=link.expires_at,
            last_accessed_at=link.last_accessed_at,
            access_count=link.access_count,
            owner_id=link.owner_id,
            project_id=link.project_id,
        )
        db.add(archived)

        redis_client.delete(link.short_code)
        await db.delete(link)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    await db.delete(project)
    await db.commit()

    return {
        "message": f"–ü—Ä–æ–µ–∫—Ç {project.name} –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã"
    }
